
raft:
  for {
    if node.status == follower:
      select {
      case <- msg:
        // msg type Vote or Normal (fire, print, ask) that counts as HB
        processMsg()
      case <- time.Timeout(5s):
        // HB timeout is over, convert to candidate
        node.term++
        node.status = candidate
        broadcastCandidate(node) // request votes
      }
    else if node.status == candidate:
      select {
      case msg <- msg:
      case timeout(electionTime):
          votes = myVotes = 0
          broadcastCandidate(node)
      }
      if msg.type == Normal:
        // there's a leader D:!
        processMsg()
        continue
      if msg.vote == true:
        myVotes++
      votes++
      if votes == totNodes && (totNodes == 0 || myVotes > votes/totNodes):
        node.status = leader
      else if votes == totNodes: // votes are over but I lost D:
        node.status = follower
    else if node.status == leader:

      if msg.type == Normal && msg.term >= node.term: // oh oh, there's another leader
        node.status = follower
        processMsg()


  }
